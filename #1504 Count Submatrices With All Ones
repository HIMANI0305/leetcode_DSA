class Solution {
    public int numSubmat(int[][] mat) {
        int m = mat.length, n = mat[0].length;
        int[][] height = new int[m][n];
        
        for (int j = 0; j < n; j++) {
            height[0][j] = mat[0][j];
            for (int i = 1; i < m; i++) {
                if (mat[i][j] == 1) height[i][j] = height[i-1][j] + 1;
                else height[i][j] = 0;
            }
        }

        int res = 0;
        for (int i = 0; i < m; i++) {
            res += countSubmatRow(height[i]);
        }
        return res;
    }

    private int countSubmatRow(int[] height) {
        int n = height.length;
        int res = 0;
        int[] sum = new int[n];
        Deque<Integer> stack = new ArrayDeque<>();

        for (int j = 0; j < n; j++) {
            while (!stack.isEmpty() && height[stack.peek()] >= height[j]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                int prev = stack.peek();
                sum[j] = sum[prev] + height[j] * (j - prev);
            } else {
                sum[j] = height[j] * (j + 1);
            }
            stack.push(j);
            res += sum[j];
        }
        return res;
    }
}
